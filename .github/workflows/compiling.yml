name: Compiling C++ Code
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  config:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Nothing to configure
        shell: cmd
        run: |
          echo "No configuration needed for this job."

  windows:
    runs-on: windows-latest
    needs: config

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Build Environment
        shell: cmd
        run: |
          mkdir build
          copy src\*.* build\
          copy CMakeLists.txt build\

      - name: Compile C++ Code with CMAKE
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 ..
          cmake --build . --config Release

      - name: Copy Build Artifacts
        run: |
          cd ..
          mkdir artifact
          copy Moo\build\bin\Release\Moo.dll artifact\
          copy Moo\build\lib\Release\Moo.lib artifact\
          copy Moo\build\lib\Release\Moo.exp artifact\
          dir artifact
          pwd

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Moo-DLL-Artifacts
          path: D:\a\Moo\artifact

  unixbased:
    needs: config
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        vector:
          - jobname: test-debian
            image: debian:latest
            os: ubuntu-latest
            cc: gcc
          - jobname: test-ubuntu
            image: ubuntu:latest
            os: ubuntu-latest
            cc: gcc
    name: ${{ matrix.vector.jobname }} (${{ matrix.vector.image }})
    container: ${{ matrix.vector.image }}
    env:
      jobname: ${{ matrix.vector.jobname }}
      CC: ${{ matrix.vector.cc }}
      CI_JOB_IMAGE: ${{ matrix.vector.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Build with ${{ matrix.vector.cc }} on ${{ matrix.vector.image }}
        run: echo "Building with ${{ matrix.vector.cc }} on ${{ matrix.vector.image }}"

      - name: Update and Install Dependencies
        run: |
          if command -v apt-get > /dev/null; then
            apt-get update
            apt-get install -y build-essential cmake make ${{ matrix.vector.cc }}
            apt-get upgrade -y
          elif command -v apk > /dev/null; then
            apk add --no-cache build-base cmake make ${{ matrix.vector.cc }}
          elif command -v dnf > /dev/null; then
            dnf install -y gcc gcc-c++ cmake make
          fi

      - name: Setup Build Environment
        run: |
          mkdir -p build
          cp -r src build/

      - name: GCC Build
        if: matrix.vector.cc == 'gcc'
        run: |
          cd build/src
          gcc -Ofast -shared -o moofast.so -fPIC moo.hpp
          gcc -O3 -shared -o mooO3.so -fPIC moo.hpp
          gcc -Os -shared -o mooSize.so -fPIC moo.hpp
          gcc -Og -shared -o mooDebug.so -fPIC moo.hpp
          gcc -shared -o moo.so -fPIC moo.hpp
          ls .

      - name: Copy Build Artifacts
        run: |
          mkdir -p artifact
          cp build/src/moo*.so artifact/
          ls artifact

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Moo-SO-Artifacts-${{ matrix.vector.jobname }}
          path: artifact/*.so

  macos:
    needs: config
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Not implemented
        run: |
          echo "MacOS build is not implemented yet"
          assert false, "MacOS build is not implemented yet"

  test_unixbased:
    needs: unixbased
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        vector:
          - jobname: test-ubuntu
            os: ubuntu-latest
            compiler: gcc
          - jobname: test-debian
            os: debian-latest
            compiler: gcc
    name: ${{ matrix.vector.jobname }} (${{ matrix.vector.os }})
    env:
      jobname: ${{ matrix.vector.jobname }}
      CI_JOB_OS: ${{ matrix.vector.os }}
      CC: ${{ matrix.vector.compiler }}
    steps:
      - uses: actions/checkout@v4

      - name: Test with ${{ matrix.vector.compiler }} on ${{ matrix.vector.os }}
        run: echo "Testing with ${{ matrix.vector.compiler }} on ${{ matrix.vector.os }}"

      - name: Run Tests
        run: |
          echo "Running tests for Moo on ${{ matrix.vector.os }} with ${{ matrix.vector.compiler }}"
          echo "Placeholder test: Always true"
          assert true, "Not implemented"
  

  test_windows:
    needs: windows
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Windows Tests
        shell: cmd
        run: |
          echo "Running tests for Moo on Windows"
          assert true, "This is a placeholder for actual tests"

  test_windows_api:
    needs: windows
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run API Tests
        shell: cmd
        run: |
          echo "Running API tests for Moo on Windows"
          assert true, "This is a placeholder for actual API tests"

  test_unixbased_api:
    needs: unixbased
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        vector:
          - jobname: test-ubuntu-api
            os: ubuntu-latest
            compiler: gcc
          - jobname: test-debian-api
            os: debian-latest
            compiler: gcc
    name: ${{ matrix.vector.jobname }} (${{ matrix.vector.os }})
    env:
      jobname: ${{ matrix.vector.jobname }}
      CI_JOB_OS: ${{ matrix.vector.os }}
      CC: ${{ matrix.vector.compiler }}
    steps:
      - uses: actions/checkout@v4

      - name: Test API with ${{ matrix.vector.compiler }} on ${{ matrix.vector.os }}
        run: echo "Testing API with ${{ matrix.vector.compiler }} on ${{ matrix.vector.os }}"

      - name: Run API Tests
        run: |
          echo "Running API tests for Moo on ${{ matrix.vector.os }} with ${{ matrix.vector.compiler }}"
          assert true, "Not implemented"

  test_macos_api:
    needs: macos
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run MacOS API Tests
        run: |
          echo "Running API tests for Moo on MacOS"
          assert true, "This is a placeholder for actual API tests"

  test_macos:
    needs: macos
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run MacOS Tests
        run: |
          echo "Running tests for Moo on MacOS"
          assert true, "This is a placeholder for actual tests"

  finishing:
    needs: [test_windows, test_unixbased, test_macos, test_windows_api, test_unixbased_api, test_macos_api]
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Finalize Build
        run: |
          echo "All tests completed successfully. Finalizing build."
          assert true, "This is a placeholder for finalization steps"